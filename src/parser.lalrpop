use crate::ast;
use std::str::{FromStr, Chars};
use lalrpop_util::ErrorRecovery;

// grammar<'err>(errors: &'err mut Vec<ErrorlRecovery<usize, Token<'input>, &'static str>>);
grammar;

// ==================== lexer ====================

// use match-use to set the priority of regular expression
// remember use of _ at the end of else
// otherwise the following expression won't be matched

match {
    r"\d\d" => DUAL_VALUE,
    r"[0-9]"
} else {
    r"-?(0|[1-9]\d*)(\.\d+)?" => VALUE,
    _ 
}

ASSIGN = "=";
Subscript = "_";
Superscript = "^";

LP = "(";
RP = ")";
LB = "[";
RB = "]";
LC = "{";
RC = "}";

// latex: excape character
FRAC = "\\frac";
EXP = "\\exp";
SQRT = "\\sqrt";
LOG = "\\log";
LN = "\\ln";

MinusOpt: ast::UnaryOperator =      { "-" => ast::UnaryOperator::Minus}
SinOpt: ast::UnaryOperator =        { "\\sin" => ast::UnaryOperator::Sin}
CosOpt: ast::UnaryOperator =        { "\\cos" => ast::UnaryOperator::Cos}
TanOpt: ast::UnaryOperator =        { "\\tan" => ast::UnaryOperator::Tan}
FactorialOpt: ast::UnaryOperator =  { "!" => ast::UnaryOperator::Factorial}

PlusOpt: ast::Operator =    { "+" => ast::Operator::Plus}
SubOpt: ast::Operator =     { "-" => ast::Operator::Sub}
MulOpt: ast::Operator =     { r"\*|\times" => ast::Operator::Mul}
DivOpt: ast::Operator =     { r"/|\div" => ast::Operator::Div}

SingleNumber: f64 = {
    r"[0-9]" => f64::from_str(<>).unwrap()
}

// [deprecated] merge int and float into value
pub (crate) Value: f64 = {
    <VALUE> => f64::from_str(<>).unwrap(),
    <DUAL_VALUE> => f64::from_str(<>).unwrap(),
}

pub (crate) Id: ast::ID = {
    r"[a-d]|[x-z]" => ast::ID::ASCII(<>.chars().next().unwrap()),
    "\\alpha" => ast::ID::Greek(ast::Greek::Alpha),
    "\\beta" => ast::ID::Greek(ast::Greek::Beta),
    "\\gamma" => ast::ID::Greek(ast::Greek::Gamma),
    "\\pi" => ast::ID::Pi,
    "e" => ast::ID::E,
}

// ==================== parser ====================

// Record the order of operations

// Parsing Process:
// Line->Expr->Factor->Level1->LatexTerm/LogPrefix/LatexDualValue->Term->Line

// 0. Parentheses (we merge value(int/float), id and parentheses)
Term: Box<ast::Expr> = {
    Value => Box::new(ast::Expr::Value(<>)),
    LatexTerm => <>,

    LP <expr: Expr> RP => expr
}

// this term is designed for latex syntax
LatexTerm: Box<ast::Expr> = {
    SingleNumber => Box::new(ast::Expr::Value(<>)),
    Id => Box::new(ast::Expr::Id(<>)),

    LC <expr: Expr> RC => expr
}

// handle specific form such log_28->log_2{8} \frac12 -> \frac{1}{2}
LatexDualValue: (Box<ast::Expr>, Box<ast::Expr>) = {
    <value: DUAL_VALUE> => {
        let next_digit = |chars: &mut Chars| 
            chars.next().unwrap().to_digit(10).unwrap() as f64;

        let mut chars = value.chars();
        let base = next_digit(&mut chars);
        let argument = next_digit(&mut chars);
        ( ast::Expr::new_value(base), ast::Expr::new_value(argument) )
    }
}

// [deprecated] log_210 != log_210, log_210 == log_{2}{1} 0
// in the syntax of Latex, we only receive single number for \log or \frac,
// otherwise, we should use '{}' to wrap those value,
// use '()' is invalid too

// handle specific form such log_210->log_2{10}
// LatexValue: (Box<ast::Expr>, Box<ast::Expr>) = {
//    <value: VALUE> => {
//         let mut chars = value.chars();

//         let base = chars.next().unwrap().to_digit(10).unwrap() as f64;
//         let argument = chars.collect::<String>().parse::<f64>().unwrap();
//         ( ast::Expr::new_value(base), ast::Expr::new_value(argument) )
//     }
// }

LogPrefix: Box<ast::Expr> = {
    // log = log_10 
    LOG => Box::new(ast::Expr::Value(10.)),
    // ln = log_e
    LN =>Box::new(ast::Expr::Id(ast::ID::E)),
    // log_n
    LOG Subscript <l: LatexTerm> => <>,
}

// TODO deal with the mixed of calculate belows

// 1. Exponentiation / Root / Log
Level1: Box<ast::Expr> = {
    <l: LatexTerm> Superscript <r: LatexTerm> 
        => Box::new(ast::Expr::Operation{l, r, opt: ast::Operator::Power}),

    // e.g. \exp{(2)}
    EXP <r: LatexTerm>
        => Box::new(ast::Expr::Operation{
            l: Box::new(ast::Expr::Id(ast::ID::E)), 
            r, 
            opt: ast::Operator::Power
        }),

    //  \sqrt{}
    SQRT <r: LatexTerm> 
        => Box::new(ast::Expr::Operation{
            l: Box::new(ast::Expr::Value(2.)), 
            r, 
            opt: ast::Operator::Root
        }),

    // \sqrt[n]{}
    SQRT LB <l: LatexTerm>  RB <r: LatexTerm> 
        => Box::new(ast::Expr::Operation{
            l, 
            r, 
            opt: ast::Operator::Root
        }),

    // \log{}
    <l: LogPrefix> <r: LatexTerm> 
        => Box::new(ast::Expr::Operation{
            l, r, opt: ast::Operator::Log
        }),

    // \log_nm
    // handle specific form such log_28->log_2{8}
    LOG Subscript <dual_value: LatexDualValue> => 
        Box::new(ast::Expr::Operation{
            l: dual_value.0,
            r: dual_value.1,
            opt: ast::Operator::Log
        }),

    // \log_nm
    // handle specific form such log_210->log_2{10}
    // LOG Subscript <dual_value: LatexValue> => 
    //     Box::new(ast::Expr::Operation{
    //         l: dual_value.0,
    //         r: dual_value.1,
    //         opt: ast::Operator::Log
    //     }),

    <opt: MinusOpt> <operand: Term> => Box::new(ast::Expr::UnaryOperation{<>}),
    <opt: SinOpt> <operand: Term> => Box::new(ast::Expr::UnaryOperation{<>}),
    <opt: CosOpt> <operand: Term> => Box::new(ast::Expr::UnaryOperation{<>}),
    <opt: TanOpt> <operand: Term> => Box::new(ast::Expr::UnaryOperation{<>}),

    Term => <>,
}


// 2. Multiplication and Division
// TODO: sometimes operator is not needed during multiplication
Factor: Box<ast::Expr> = {
    <l: Factor> <opt: MulOpt> <r: Level1>
        => Box::new(ast::Expr::Operation{<>}),
    <l: Factor> <opt: DivOpt> <r: Level1>
        => Box::new(ast::Expr::Operation{<>}),
    FRAC <l: LatexTerm> <r: LatexTerm>
        => Box::new(ast::Expr::Operation{
            l, r, opt: ast::Operator::Div
        }),

    FRAC <dual_value: LatexDualValue> => 
        Box::new(ast::Expr::Operation{
            l: dual_value.0,
            r: dual_value.1,
            opt: ast::Operator::Div
        }),
    Level1 => <>,
}

// 3. Addition and Subtraction
pub Expr: Box<ast::Expr> = {
    <l: Expr> <opt: PlusOpt> <r: Factor> => Box::new(ast::Expr::Operation{<>}),
    <l: Expr> <opt: SubOpt> <r: Factor> => Box::new(ast::Expr::Operation{<>}),

    <operand: Factor> <opt: FactorialOpt> => Box::new(ast::Expr::UnaryOperation{<>}),
    Factor => <>,
}

pub Line: ast::Line = {
    // the type of Expr parsing result is Box
    // so you should use * to deref it 
    <id: Id> ASSIGN <expr: Expr> => ast::Line::Sentence(id, *expr),
    <Expr> => ast::Line::Expression(*<>),
} 